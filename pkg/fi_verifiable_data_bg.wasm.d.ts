/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_vc_free(a: number, b: number): void;
export function vc_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function vc_addIsser(a: number, b: number, c: number): void;
export function vc_setContext(a: number, b: number): void;
export function vc_addContext(a: number, b: number, c: number): void;
export function vc_addType(a: number, b: number, c: number): void;
export function vc_setType(a: number, b: number): void;
export function vc_setCredentialStatus(a: number, b: number): void;
export function vc_setCredentialSchemas(a: number, b: number): void;
export function vc_setExpire(a: number, b: number): void;
export function vc_setTermsOfUse(a: number, b: number): void;
export function vc_setRefreshService(a: number, b: number): void;
export function vc_setEvidence(a: number, b: number): void;
export function vc_getProof(a: number): number;
export function vc_sign(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function vc_verify(a: number, b: number, c: number, d: number): void;
export function vc_toObject(a: number, b: number): void;
export function vc_getSignableContent(a: number, b: number): void;
export function vc_addField(a: number, b: number, c: number, d: number): void;
export function vc_from(a: number, b: number): void;
export function vc_setIsser(a: number, b: number): void;
export function __wbg_vp_free(a: number, b: number): void;
export function vp_new(a: number, b: number, c: number): number;
export function vp_setHolder(a: number, b: number): void;
export function vp_setContext(a: number, b: number): void;
export function vp_addContext(a: number, b: number, c: number): void;
export function vp_addType(a: number, b: number, c: number): void;
export function vp_setType(a: number, b: number): void;
export function vp_getProof(a: number): number;
export function vp_addVerifiableCredential(a: number, b: number): void;
export function vp_setVerifiableCredential(a: number, b: number, c: number): void;
export function vp_sign(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function vp_verify(a: number, b: number, c: number, d: number): void;
export function vp_toObject(a: number, b: number): void;
export function vp_getSignableContent(a: number, b: number): void;
export function vp_addField(a: number, b: number, c: number, d: number): void;
export function vp_from(a: number, b: number): void;
export function __wbg_verificationdocument_free(a: number, b: number): void;
export function verificationdocument_new(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function __wbg_documentloader_free(a: number, b: number): void;
export function documentloader_new(a: number, b: number): void;
export function documentloader_getVerificationDocument(a: number, b: number, c: number): number;
export function __wbg_fierror_free(a: number, b: number): void;
export function fierror_new(a: number, b: number): number;
export function __wbg_p256ksigningkey_free(a: number, b: number): void;
export function __wbg_p256kverifyingkey_free(a: number, b: number): void;
export function __wbg_rsasigningkey_free(a: number, b: number): void;
export function __wbg_rsaverifyingkey_free(a: number, b: number): void;
export function __wbg_p256signingkey_free(a: number, b: number): void;
export function __wbg_p256verifyingkey_free(a: number, b: number): void;
export function __wbg_p384signingkey_free(a: number, b: number): void;
export function __wbg_p384verifyingkey_free(a: number, b: number): void;
export function __wbg_eddsasigningkey_free(a: number, b: number): void;
export function __wbg_eddsaverifyingkey_free(a: number, b: number): void;
export function __wbg_error_free(a: number, b: number): void;
export function error_toString(a: number, b: number): void;
export function __wbg_p512signingkey_free(a: number, b: number): void;
export function __wbg_p512verifyingkey_free(a: number, b: number): void;
export function __wbg_hmackey_free(a: number, b: number): void;
export function hmackey_new(a: number, b: number): number;
export function hmackey_from_js_object(a: number, b: number): void;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
